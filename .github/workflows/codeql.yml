name: "CodeQL"

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  analyze:
    name: Analyze
    runs-on: ubuntu-latest
    timeout-minutes: 360
    permissions:
      security-events: write
      actions: read
      contents: read

    strategy:
      fail-fast: false
      matrix:
        language: [ 'csharp' ]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        # Include additional custom query for SQL injection
        queries: |
          security-and-quality
          import csharp

          from MethodCall m, MethodAccess t
          where
            t.getTarget().getName() = "ExecuteQuery" and
            m = t.getTarget() and
            m.getDeclaringType().getQualifiedName().matches("VulnerableClass") and
            m.getParameter(0).getType().getName() = "String" and
            exists(SqlStringExpr exp |
              exp = m.getArgument(0) and
              exp.getAnAccess().getTarget().hasQualifiedName("System.Data.SqlClient", "SqlCommand") and
              exp.getArgument(0).hasTag(ExpressionTag.STRING_CONCATENATION)
            )
          select m, "Potential SQL Injection detected"

    - name: Autobuild
      uses: github/codeql-action/autobuild@v3

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"
